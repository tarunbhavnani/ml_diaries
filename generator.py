# -*- coding: utf-8 -*-
"""
Created on Tue Jul  4 11:30:58 2023

@author: tarun
"""

async def coro_func():
    print("Hello, asyncio!")
    
coro_obj = coro_func()

type(coro_obj)
# coroutine


#generator
def gen_func():
    yield "Hello, generator!"


generator = gen_func()
type(generator)


def gen_func():
    for x in range(100):
        yield x

[i for i in gen_func()]



def infinite_sequence():
    num = 0
    while True:
        yield num
        num += 1

[print(i) for i in infinite_sequence()]


def my_generator():
    yield 1
    yield 2
    yield 3

# Create an iterator from the generator function
my_iterator = my_generator()

# Iterate over the values generated by the iterator
print(next(my_iterator))  # Output: 1
print(next(my_iterator))  # Output: 2
print(next(my_iterator))  # Output: 3


# generator for prime numbers

p=12
def prime(p):
    if p<3:
        return
    for i in range(2,p):
        if p%i==0:
            return 
    return p


[prime(i)  for i in range(10000) if prime(i) is not None]    



#infinite sequence generator


def inf():
    num=0
    while True:
        yield num
        num+=1

for i in inf():
    print(i, end=", ", flush=True)
    




import asyncio

async def coro_func():
    return "Hello, asyncio!"

async def main():
    print("In the entrypoint coroutine.")
    result = await coro_func()
    print(result)

asyncio.run(main())
# In the entrypoint coroutine.
# Hello, asyncio!






# =============================================================================
# 
# =============================================================================

import sys

nums_squared_lc = [num**2 for num in range(5)]
nums_squared_lc
sys.getsizeof(nums_squared_lc)

nums_squared_gc = (num**2 for num in range(5))
nums_squared_gc
sys.getsizeof(nums_squared_gc)
for i in range(15):
    print(next(nums_squared_gc))



def check_yield():
    num=0
    for i in range(100):
        yield i

cy= check_yield()
[next(cy) for i in range(10)]














    






